/viper_casts_while_inlining.kt:(144,149): info: Generated Viper text for idFun:
method f$idFun$TF$Any(p$arg: Ref) returns (ret$0: Ref)
{
  ret$0 := p$arg
  goto lbl$ret$0
  label lbl$ret$0
}

/viper_casts_while_inlining.kt:(429,446): info: Generated Viper text for checkMemberAccess:
field bf$member: Ref

method con$c$ClassWithMember$T$Int(p$member: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$ClassWithMember())
  ensures acc(p$c$ClassWithMember$shared(ret), wildcard)
  ensures acc(p$c$ClassWithMember$unique(ret), write)
  ensures (unfolding acc(p$c$ClassWithMember$shared(ret), wildcard) in
      df$rt$intFromRef(ret.bf$member) == df$rt$intFromRef(p$member))


method f$checkMemberAccess$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == true
{
  var l0$obj: Ref
  var anon$4: Ref
  var anon$5: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$6: Ref
  var ret$2: Ref
  var anon$1: Ref
  var anon$7: Ref
  var anon$8: Ref
  var anon$9: Ref
  var ret$3: Ref
  var anon$2: Ref
  var anon$10: Ref
  var ret$4: Ref
  var anon$3: Ref
  var anon$11: Ref
  l0$obj := con$c$ClassWithMember$T$Int(df$rt$intToRef(42))
  anon$0 := l0$obj
  anon$7 := f$idFun$TF$Any(anon$0)
  anon$1 := anon$7
  inhale df$rt$isSubtype(df$rt$typeOf(anon$1), df$rt$T$c$ClassWithMember())
  inhale acc(p$c$ClassWithMember$shared(anon$1), wildcard)
  unfold acc(p$c$ClassWithMember$shared(anon$1), wildcard)
  ret$2 := anon$1.bf$member
  goto lbl$ret$2
  label lbl$ret$2
  inhale df$rt$isSubtype(df$rt$typeOf(ret$2), df$rt$intType())
  anon$6 := ret$2
  ret$1 := anon$6
  goto lbl$ret$1
  label lbl$ret$1
  anon$5 := ret$1
  anon$4 := anon$5
  inhale df$rt$isSubtype(df$rt$typeOf(anon$4), df$rt$intType())
  anon$2 := l0$obj
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$T$c$ClassWithMember())
  inhale acc(p$c$ClassWithMember$shared(anon$2), wildcard)
  anon$3 := anon$2
  unfold acc(p$c$ClassWithMember$shared(l0$obj), wildcard)
  anon$11 := l0$obj.bf$member
  ret$0 := df$rt$boolToRef(df$rt$intFromRef(anon$11) == 42)
  goto lbl$ret$0
  label lbl$ret$4
  inhale df$rt$isSubtype(df$rt$typeOf(ret$4), df$rt$nothingType())
  anon$10 := ret$4
  ret$3 := anon$10
  goto lbl$ret$3
  label lbl$ret$3
  anon$9 := ret$3
  anon$8 := anon$9
  inhale df$rt$isSubtype(df$rt$typeOf(anon$8), df$rt$nothingType())
  label lbl$ret$0
}

method f$idFun$TF$Any(p$arg: Ref) returns (ret: Ref)


/viper_casts_while_inlining.kt:(715,739): info: Generated Viper text for checkGenericMemberAccess:
field bf$wrapped: Ref

method con$c$Box$Any(p$wrapped: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$Box())
  ensures acc(p$c$Box$shared(ret), wildcard)
  ensures acc(p$c$Box$unique(ret), write)
  ensures (unfolding acc(p$c$Box$shared(ret), wildcard) in
      ret.bf$wrapped == p$wrapped)


method f$checkGenericMemberAccess$TF$T$c$Box(p$box: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == true
{
  var ret$1: Ref
  var anon$0: Ref
  var ret$2: Ref
  var anon$1: Ref
  var anon$4: Ref
  var anon$5: Ref
  var anon$6: Ref
  var ret$3: Ref
  var anon$2: Ref
  var anon$7: Ref
  var anon$8: Ref
  var anon$9: Ref
  var ret$4: Ref
  var anon$3: Ref
  var anon$10: Ref
  var anon$11: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$box), df$rt$T$c$Box())
  inhale acc(p$c$Box$shared(p$box), wildcard)
  anon$0 := p$box
  anon$4 := f$idFun$TF$Any(anon$0)
  anon$1 := anon$4
  inhale df$rt$isSubtype(df$rt$typeOf(anon$1), df$rt$T$c$Box())
  inhale acc(p$c$Box$shared(anon$1), wildcard)
  unfold acc(p$c$Box$shared(anon$1), wildcard)
  ret$2 := anon$1.bf$wrapped
  goto lbl$ret$2
  label lbl$ret$2
  ret$1 := ret$2
  goto lbl$ret$1
  label lbl$ret$1
  unfold acc(p$c$Box$shared(p$box), wildcard)
  anon$8 := p$box.bf$wrapped
  anon$7 := con$c$Box$Any(anon$8)
  anon$2 := anon$7
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$T$c$Box())
  inhale acc(p$c$Box$shared(anon$2), wildcard)
  anon$3 := anon$2
  unfold acc(p$c$Box$shared(anon$3), wildcard)
  anon$10 := anon$3.bf$wrapped
  unfold acc(p$c$Box$shared(p$box), wildcard)
  anon$11 := p$box.bf$wrapped
  ret$0 := df$rt$boolToRef(anon$10 == anon$11)
  goto lbl$ret$0
  label lbl$ret$4
  inhale df$rt$isSubtype(df$rt$typeOf(ret$4), df$rt$nothingType())
  anon$9 := ret$4
  ret$3 := anon$9
  goto lbl$ret$3
  label lbl$ret$3
  anon$6 := ret$3
  anon$5 := anon$6
  inhale df$rt$isSubtype(df$rt$typeOf(anon$5), df$rt$nothingType())
  label lbl$ret$0
}

method f$idFun$TF$Any(p$arg: Ref) returns (ret: Ref)
