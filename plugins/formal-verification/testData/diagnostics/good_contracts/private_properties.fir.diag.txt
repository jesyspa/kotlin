/private_properties.kt:(301,316): info: Generated Viper text for getBooleanField:
method f$c$A$getBooleanField$TF$T$A(this$dispatch: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
{
  var anon$0: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(this$dispatch), df$rt$c$A())
  inhale acc(p$c$A$shared(this$dispatch), wildcard)
  anon$0 := pg$c$A$private$field(this$dispatch)
  ret$0 := anon$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$c$A$private$field(this$dispatch: Ref) returns (ret: Ref)


method ps$c$A$private$field(this$dispatch: Ref, anon$0: Ref)
  returns (ret: Ref)


/private_properties.kt:(395,409): info: Generated Viper text for getStringField:
field bf$c$B$private$field: Ref

field bf$length: Ref

method f$c$B$getStringField$TF$T$B(this$dispatch: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$c$pkg$kotlin$String())
  ensures acc(p$pkg$kotlin$c$String$shared(ret$0), wildcard)
{
  inhale df$rt$isSubtype(df$rt$typeOf(this$dispatch), df$rt$c$B())
  inhale acc(p$c$B$shared(this$dispatch), wildcard)
  unfold acc(p$c$B$shared(this$dispatch), wildcard)
  ret$0 := this$dispatch.bf$c$B$private$field
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$c$A$private$field(this$dispatch: Ref) returns (ret: Ref)


method pg$public$length(this$dispatch: Ref) returns (ret: Ref)


method ps$c$A$private$field(this$dispatch: Ref, anon$0: Ref)
  returns (ret: Ref)


/private_properties.kt:(554,567): info: Generated Viper text for extractPublic:
field bf$c$B$private$field: Ref

field bf$field: Ref

field bf$length: Ref

field bf$size: Ref

method con$c$C$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$c$C())
  ensures acc(p$c$C$shared(ret), wildcard)
  ensures acc(p$c$C$unique(ret), write)


method con$c$D$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$c$D())
  ensures acc(p$c$D$shared(ret), wildcard)
  ensures acc(p$c$D$unique(ret), write)


method f$extractPublic$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  anon$1 := con$c$C$()
  inhale acc(anon$1.bf$field, write)
  anon$0 := anon$1.bf$field
  exhale acc(anon$1.bf$field, write)
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  assert df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  anon$3 := con$c$D$()
  unfold acc(p$c$D$shared(anon$3), wildcard)
  anon$2 := anon$3.bf$field
  assert df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$intType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

method pg$c$A$private$field(this$dispatch: Ref) returns (ret: Ref)


method pg$public$length(this$dispatch: Ref) returns (ret: Ref)


method ps$c$A$private$field(this$dispatch: Ref, anon$0: Ref)
  returns (ret: Ref)
