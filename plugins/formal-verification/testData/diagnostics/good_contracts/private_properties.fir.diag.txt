/private_properties.kt:(143,158): info: Generated Viper text for getBooleanField:
field class_A_private$member_field: Ref

method class_A$fun_getBooleanField$fun_take$T_class_global$class_A$return$T_Boolean(this: Ref)
  returns (ret$0: Ref)
  requires acc(T_class_global$class_A(this), wildcard)
  ensures acc(T_class_global$class_A(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(this), dom$RuntimeType$T_class_global$class_A())
  inhale acc(this.class_A_private$member_field, write)
  ret$0 := this.class_A_private$member_field
  exhale acc(this.class_A_private$member_field, write)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
  goto label$ret$0
  label label$ret$0
}

/private_properties.kt:(237,251): info: Generated Viper text for getStringField:
field class_A_private$member_field: Ref

field class_B_private$member_field: Ref

field property$member_length: Ref

method class_B$fun_getStringField$fun_take$T_class_global$class_B$return$T_class_pkg$kotlin$global$class_String(this: Ref)
  returns (ret$0: Ref)
  requires acc(T_class_global$class_B(this), wildcard)
  ensures acc(T_class_global$class_B(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$T_class_pkg$kotlin$global$class_String())
  ensures acc(T_class_pkg$kotlin$global$class_String(ret$0), wildcard)
{
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(this), dom$RuntimeType$T_class_global$class_B())
  unfold acc(T_class_global$class_B(this), wildcard)
  ret$0 := this.class_B_private$member_field
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Ref)
  requires acc(T_class_pkg$kotlin$global$class_CharSequence(this), wildcard)
  ensures acc(T_class_pkg$kotlin$global$class_CharSequence(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


/private_properties.kt:(419,432): info: Generated Viper text for extractPublic:
field class_A_private$member_field: Ref

field class_B_private$member_field: Ref

field property$member_field: Ref

field property$member_length: Ref

method class_C$constructor$fun_take$$return$T_class_global$class_C()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_C())
  ensures acc(T_class_global$class_C(ret), wildcard)


method class_D$constructor$fun_take$$return$T_class_global$class_D()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_D())
  ensures acc(T_class_global$class_D(ret), wildcard)


method global$fun_extractPublic$fun_take$$return$T_Boolean()
  returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$boolType())
  ensures dom$RuntimeType$boolFromRef(ret$0) == false ==> false
{
  var anonymous$0: Ref
  var anonymous$1: Ref
  anonymous$1 := class_C$constructor$fun_take$$return$T_class_global$class_C()
  inhale acc(anonymous$1.property$member_field, write)
  anonymous$0 := anonymous$1.property$member_field
  exhale acc(anonymous$1.property$member_field, write)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$0), dom$RuntimeType$intType())
  if (dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$0), dom$RuntimeType$intType())) {
    var anonymous$2: Ref
    var anonymous$3: Ref
    anonymous$3 := class_D$constructor$fun_take$$return$T_class_global$class_D()
    unfold acc(T_class_global$class_D(anonymous$3), wildcard)
    anonymous$2 := anonymous$3.property$member_field
    ret$0 := dom$RuntimeType$boolToRef(dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(anonymous$2),
      dom$RuntimeType$intType()))
  } else {
    ret$0 := dom$RuntimeType$boolToRef(false)}
  goto label$ret$0
  label label$ret$0
}

method pkg$kotlin$class_CharSequence$getter_length(this: Ref)
  returns (ret: Ref)
  requires acc(T_class_pkg$kotlin$global$class_CharSequence(this), wildcard)
  ensures acc(T_class_pkg$kotlin$global$class_CharSequence(this), wildcard)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())
