/private_properties.kt:(195,210): info: Generated Viper text for getBooleanField:
method f$c$A$getBooleanField$TF$T$class_c$g$A(this: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
{
  var anon$0: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(this), df$rt$T$class_c$g$A())
  inhale acc(T$class_c$g$A(this), wildcard)
  anon$0 := pg$c$A$private$field(this)
  ret$0 := anon$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$c$A$private$field(this: Ref) returns (ret: Ref)


method ps$c$A$private$field(this: Ref, value: Ref) returns (ret: Ref)


/private_properties.kt:(289,303): info: Generated Viper text for getStringField:
field bf$c$B$private$field: Ref

field bf$public$length: Ref

method f$c$B$getStringField$TF$T$class_c$g$B(this: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$T$class_c$pkg$kotlin$g$String())
  ensures acc(T$class_c$pkg$kotlin$g$String(ret$0), wildcard)
{
  inhale df$rt$isSubtype(df$rt$typeOf(this), df$rt$T$class_c$g$B())
  inhale acc(T$class_c$g$B(this), wildcard)
  unfold acc(T$class_c$g$B(this), wildcard)
  ret$0 := this.bf$c$B$private$field
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$c$A$private$field(this: Ref) returns (ret: Ref)


method pg$public$length(this: Ref) returns (ret: Ref)


method ps$c$A$private$field(this: Ref, value: Ref) returns (ret: Ref)


/private_properties.kt:(471,484): info: Generated Viper text for extractPublic:
field bf$c$B$private$field: Ref

field bf$public$field: Ref

field bf$public$length: Ref

method con$c$C$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$class_c$g$C())
  ensures acc(T$class_c$g$C(ret), wildcard)
  ensures acc(U$T$class_c$g$C(ret), write)


method con$c$D$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$class_c$g$D())
  ensures acc(T$class_c$g$D(ret), wildcard)
  ensures acc(U$T$class_c$g$D(ret), write)


method f$g$extractPublic$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == false ==> false
{
  var anon$0: Ref
  var anon$1: Ref
  anon$1 := con$c$C$()
  inhale acc(anon$1.bf$public$field, write)
  anon$0 := anon$1.bf$public$field
  exhale acc(anon$1.bf$public$field, write)
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  if (df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())) {
    var anon$2: Ref
    var anon$3: Ref
    anon$3 := con$c$D$()
    unfold acc(T$class_c$g$D(anon$3), wildcard)
    anon$2 := anon$3.bf$public$field
    ret$0 := df$rt$boolToRef(df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$intType()))
  } else {
    ret$0 := df$rt$boolToRef(false)}
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$c$A$private$field(this: Ref) returns (ret: Ref)


method pg$public$length(this: Ref) returns (ret: Ref)


method ps$c$A$private$field(this: Ref, value: Ref) returns (ret: Ref)
