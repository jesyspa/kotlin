/try_catch.kt:(158,166): info: Generated Viper text for tryCatch:
method f$g$call$TF$T$Int(p$x: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$g$tryCatch$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  var l2$e: Ref
  var anon$4: Ref
  ret$0 := df$rt$unitValue()
  if (df$rt$boolFromRef(anon$0)) {
    goto lbl$catch$0
  }
  anon$1 := f$g$call$TF$T$Int(df$rt$intToRef(0))
  anon$2 := f$g$call$TF$T$Int(df$rt$intToRef(1))
  if (df$rt$boolFromRef(anon$3)) {
    goto lbl$catch$0
  }
  goto lbl$try_exit$0
  label lbl$catch$0
  anon$4 := f$g$call$TF$T$Int(df$rt$intToRef(2))
  goto lbl$try_exit$0
  label lbl$try_exit$0
  label lbl$ret$0
}

method pg$public$cause(this: Ref) returns (ret: Ref)


method pg$public$message(this: Ref) returns (ret: Ref)


/try_catch.kt:(271,285): info: Generated Viper text for nestedTryCatch:
method f$g$call$TF$T$Int(p$x: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$g$nestedTryCatch$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  var anon$4: Ref
  var l3$e: Ref
  var anon$5: Ref
  var anon$6: Ref
  var l4$e: Ref
  ret$0 := df$rt$unitValue()
  if (df$rt$boolFromRef(anon$0)) {
    goto lbl$catch$0
  }
  anon$1 := f$g$call$TF$T$Int(df$rt$intToRef(0))
  if (df$rt$boolFromRef(anon$2)) {
    goto lbl$catch$1
  }
  anon$3 := f$g$call$TF$T$Int(df$rt$intToRef(1))
  if (df$rt$boolFromRef(anon$4)) {
    goto lbl$catch$1
  }
  goto lbl$try_exit$1
  label lbl$catch$1
  anon$5 := f$g$call$TF$T$Int(df$rt$intToRef(2))
  goto lbl$try_exit$1
  label lbl$try_exit$1
  if (df$rt$boolFromRef(anon$6)) {
    goto lbl$catch$0
  }
  goto lbl$try_exit$0
  label lbl$catch$0
  goto lbl$try_exit$0
  label lbl$try_exit$0
  label lbl$ret$0
}

method pg$public$cause(this: Ref) returns (ret: Ref)


method pg$public$message(this: Ref) returns (ret: Ref)


/try_catch.kt:(574,592): info: Generated Viper text for tryCatchWithInline:
method f$g$call$TF$T$Int(p$x: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$g$tryCatchWithInline$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var ret$1: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  var l3$e: Ref
  var anon$4: Ref
  ret$0 := df$rt$unitValue()
  if (df$rt$boolFromRef(anon$0)) {
    goto lbl$catch$0
  }
  anon$1 := f$g$call$TF$T$Int(df$rt$intToRef(0))
  anon$2 := f$g$call$TF$T$Int(df$rt$intToRef(1))
  label lbl$ret$1
  if (df$rt$boolFromRef(anon$3)) {
    goto lbl$catch$0
  }
  goto lbl$try_exit$0
  label lbl$catch$0
  anon$4 := f$g$call$TF$T$Int(df$rt$intToRef(2))
  goto lbl$try_exit$0
  label lbl$try_exit$0
  label lbl$ret$0
}

method pg$public$cause(this: Ref) returns (ret: Ref)


method pg$public$message(this: Ref) returns (ret: Ref)


/try_catch.kt:(685,702): info: Generated Viper text for tryCatchShadowing:
method f$g$tryCatchShadowing$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$x: Ref
  var anon$0: Ref
  var l1$x: Ref
  var anon$1: Ref
  var l2$e: Ref
  var l2$x: Ref
  ret$0 := df$rt$unitValue()
  l0$x := df$rt$intToRef(0)
  if (df$rt$boolFromRef(anon$0)) {
    goto lbl$catch$0
  }
  l1$x := df$rt$intToRef(1)
  if (df$rt$boolFromRef(anon$1)) {
    goto lbl$catch$0
  }
  goto lbl$try_exit$0
  label lbl$catch$0
  l2$x := df$rt$intToRef(2)
  goto lbl$try_exit$0
  label lbl$try_exit$0
  label lbl$ret$0
}

method pg$public$cause(this: Ref) returns (ret: Ref)


method pg$public$message(this: Ref) returns (ret: Ref)


/try_catch.kt:(813,828): info: Generated Viper text for multipleCatches:
method f$g$call$TF$T$Int(p$x: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$g$multipleCatches$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  var anon$4: Ref
  var anon$5: Ref
  var l2$e: Ref
  var anon$6: Ref
  var l3$e: Ref
  var anon$7: Ref
  ret$0 := df$rt$unitValue()
  if (df$rt$boolFromRef(anon$0)) {
    goto lbl$catch$0
  }
  if (df$rt$boolFromRef(anon$1)) {
    goto lbl$catch$1
  }
  anon$2 := f$g$call$TF$T$Int(df$rt$intToRef(0))
  anon$3 := f$g$call$TF$T$Int(df$rt$intToRef(1))
  if (df$rt$boolFromRef(anon$4)) {
    goto lbl$catch$0
  }
  if (df$rt$boolFromRef(anon$5)) {
    goto lbl$catch$1
  }
  goto lbl$try_exit$0
  label lbl$catch$0
  anon$6 := f$g$call$TF$T$Int(df$rt$intToRef(2))
  goto lbl$try_exit$0
  label lbl$catch$1
  anon$7 := f$g$call$TF$T$Int(df$rt$intToRef(3))
  goto lbl$try_exit$0
  label lbl$try_exit$0
  label lbl$ret$0
}

method pg$public$cause(this: Ref) returns (ret: Ref)


method pg$public$message(this: Ref) returns (ret: Ref)


/try_catch.kt:(1044,1056): info: Generated Viper text for useException:
method f$g$call$TF$T$Int(p$x: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$g$ignore$TF$T$c$pkg$java_lang$g$Exception(p$e: Ref)
  returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$g$useException$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var l2$e: Ref
  var anon$3: Ref
  ret$0 := df$rt$unitValue()
  if (df$rt$boolFromRef(anon$0)) {
    goto lbl$catch$0
  }
  anon$1 := f$g$call$TF$T$Int(df$rt$intToRef(0))
  if (df$rt$boolFromRef(anon$2)) {
    goto lbl$catch$0
  }
  goto lbl$try_exit$0
  label lbl$catch$0
  anon$3 := f$g$ignore$TF$T$c$pkg$java_lang$g$Exception(l2$e)
  goto lbl$try_exit$0
  label lbl$try_exit$0
  label lbl$ret$0
}

method pg$public$cause(this: Ref) returns (ret: Ref)


method pg$public$message(this: Ref) returns (ret: Ref)
