/safe_call.kt:(142,154): info: Generated Viper text for testSafeCall:
field bf$public$x: Ref

method f$c$Foo$f$TF$T$c$g$Foo(this: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$g$testSafeCall$TF$c$g$Foo(p$foo: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$unitType()))
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$foo), df$rt$nullable(df$rt$T$c$g$Foo()))
  inhale p$foo != df$rt$nullValue() ==>
    acc(p$g$c$Foo$shared(p$foo), wildcard)
  if (p$foo != df$rt$nullValue()) {
    var anon$0: Ref
    anon$0 := f$c$Foo$f$TF$T$c$g$Foo(p$foo)
    ret$0 := anon$0
  } else {
    ret$0 := df$rt$nullValue()}
  goto lbl$ret$0
  label lbl$ret$0
}

/safe_call.kt:(217,240): info: Generated Viper text for testSafeCallNonNullable:
field bf$public$x: Ref

method f$c$Foo$f$TF$T$c$g$Foo(this: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


method f$g$testSafeCallNonNullable$TF$T$c$g$Foo(p$foo: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$unitType()))
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$foo), df$rt$T$c$g$Foo())
  inhale acc(p$g$c$Foo$shared(p$foo), wildcard)
  if (p$foo != df$rt$nullValue()) {
    var anon$0: Ref
    anon$0 := f$c$Foo$f$TF$T$c$g$Foo(p$foo)
    ret$0 := anon$0
  } else {
    ret$0 := df$rt$nullValue()}
  goto lbl$ret$0
  label lbl$ret$0
}

/safe_call.kt:(267,287): info: Generated Viper text for testSafeCallProperty:
field bf$public$x: Ref

method f$g$testSafeCallProperty$TF$c$g$Foo(p$foo: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$intType()))
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$foo), df$rt$nullable(df$rt$T$c$g$Foo()))
  inhale p$foo != df$rt$nullValue() ==>
    acc(p$g$c$Foo$shared(p$foo), wildcard)
  if (p$foo != df$rt$nullValue()) {
    var anon$0: Ref
    unfold acc(p$g$c$Foo$shared(p$foo), wildcard)
    anon$0 := p$foo.bf$public$x
    ret$0 := anon$0
  } else {
    ret$0 := df$rt$nullValue()}
  goto lbl$ret$0
  label lbl$ret$0
}

/safe_call.kt:(354,385): info: Generated Viper text for testSafeCallPropertyNonNullable:
field bf$public$x: Ref

method f$g$testSafeCallPropertyNonNullable$TF$T$c$g$Foo(p$foo: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$intType()))
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$foo), df$rt$T$c$g$Foo())
  inhale acc(p$g$c$Foo$shared(p$foo), wildcard)
  if (p$foo != df$rt$nullValue()) {
    var anon$0: Ref
    unfold acc(p$g$c$Foo$shared(p$foo), wildcard)
    anon$0 := p$foo.bf$public$x
    ret$0 := anon$0
  } else {
    ret$0 := df$rt$nullValue()}
  goto lbl$ret$0
  label lbl$ret$0
}

/safe_call.kt:(493,506): info: Generated Viper text for safeCallChain:
field bf$public$v: Ref

method f$c$Rec$nullable$TF$T$c$g$Rec(this: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$nullable(df$rt$T$c$g$Rec()))
  ensures ret != df$rt$nullValue() ==> acc(p$g$c$Rec$shared(ret), wildcard)


method f$g$safeCallChain$TF$c$g$Rec(p$rec: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$intType()))
{
  var anon$0: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$rec), df$rt$nullable(df$rt$T$c$g$Rec()))
  inhale p$rec != df$rt$nullValue() ==>
    acc(p$g$c$Rec$shared(p$rec), wildcard)
  if (p$rec != df$rt$nullValue()) {
    anon$1 := f$c$Rec$nullable$TF$T$c$g$Rec(p$rec)
  } else {
    anon$1 := df$rt$nullValue()}
  if (anon$1 != df$rt$nullValue()) {
    anon$0 := f$c$Rec$nullable$TF$T$c$g$Rec(anon$1)
  } else {
    anon$0 := df$rt$nullValue()}
  if (anon$0 != df$rt$nullValue()) {
    var anon$2: Ref
    unfold acc(p$g$c$Rec$shared(anon$0), wildcard)
    anon$2 := anon$0.bf$public$v
    ret$0 := anon$2
  } else {
    ret$0 := df$rt$nullValue()}
  goto lbl$ret$0
  label lbl$ret$0
}
