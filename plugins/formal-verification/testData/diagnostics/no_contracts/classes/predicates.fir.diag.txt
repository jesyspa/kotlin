/predicates.kt:(203,213): info: Generated Viper text for useClasses:
field bf$public$a: Ref

field bf$public$b: Ref

field bf$public$next: Ref

field bf$public$pf: Ref

predicate T$class_c$g$Baz(this: Ref) {
  true
}

predicate T$class_c$g$PrimitiveFields(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate T$class_c$g$Recursive(this: Ref) {
  acc(this.bf$public$next, wildcard) &&
  (this.bf$public$next != df$rt$nullValue() ==>
  acc(T$class_c$g$Recursive(this.bf$public$next), wildcard)) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$next), df$rt$nullable(df$rt$T$class_c$g$Recursive()))
}

predicate T$class_c$g$ReferenceField(this: Ref) {
  acc(this.bf$public$pf, wildcard) &&
  acc(T$class_c$g$PrimitiveFields(this.bf$public$pf), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$pf), df$rt$T$class_c$g$PrimitiveFields()) &&
  acc(T$class_c$g$Baz(this), wildcard)
}

predicate U$T$class_c$g$Baz(this: Ref) {
  true
}

predicate U$T$class_c$g$PrimitiveFields(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType()) &&
  acc(this.bf$public$b, write) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType())
}

predicate U$T$class_c$g$Recursive(this: Ref) {
  acc(this.bf$public$next, wildcard) &&
  (this.bf$public$next != df$rt$nullValue() ==>
  acc(T$class_c$g$Recursive(this.bf$public$next), wildcard)) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$next), df$rt$nullable(df$rt$T$class_c$g$Recursive()))
}

predicate U$T$class_c$g$ReferenceField(this: Ref) {
  acc(this.bf$public$pf, wildcard) &&
  acc(T$class_c$g$PrimitiveFields(this.bf$public$pf), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$pf), df$rt$T$class_c$g$PrimitiveFields()) &&
  acc(U$T$class_c$g$Baz(this), write)
}

method f$g$useClasses$TF$T$class_c$g$ReferenceField$T$class_c$g$Recursive(p$rf: Ref,
  p$rec: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$rf), df$rt$T$class_c$g$ReferenceField())
  inhale acc(T$class_c$g$ReferenceField(p$rf), wildcard)
  inhale df$rt$isSubtype(df$rt$typeOf(p$rec), df$rt$T$class_c$g$Recursive())
  inhale acc(T$class_c$g$Recursive(p$rec), wildcard)
  ret$0 := df$rt$unitValue()
  label lbl$ret$0
}

/predicates.kt:(354,374): info: Generated Viper text for threeLayersHierarchy:
field bf$public$x: Ref

field bf$public$y: Ref

predicate T$class_c$g$A(this: Ref) {
  acc(this.bf$public$x, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$x), df$rt$intType())
}

predicate T$class_c$g$B(this: Ref) {
  acc(T$class_c$g$A(this), wildcard)
}

predicate T$class_c$g$C(this: Ref) {
  acc(T$class_c$g$B(this), wildcard)
}

predicate U$T$class_c$g$A(this: Ref) {
  acc(this.bf$public$x, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$x), df$rt$intType()) &&
  acc(this.bf$public$y, write) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$y), df$rt$intType())
}

predicate U$T$class_c$g$B(this: Ref) {
  acc(U$T$class_c$g$A(this), write)
}

predicate U$T$class_c$g$C(this: Ref) {
  acc(U$T$class_c$g$B(this), write)
}

method f$g$threeLayersHierarchy$TF$T$class_c$g$C(p$c: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$c), df$rt$T$class_c$g$C())
  inhale acc(T$class_c$g$C(p$c), wildcard)
  ret$0 := df$rt$unitValue()
  label lbl$ret$0
}

/predicates.kt:(390,403): info: Generated Viper text for listHierarchy:
field sp$size: Ref

predicate T$class_c$pkg$kotlin_collections$g$Collection(this: Ref) {
  acc(T$class_c$pkg$kotlin_collections$g$Iterable(this), wildcard)
}

predicate T$class_c$pkg$kotlin_collections$g$Iterable(this: Ref) {
  true
}

predicate T$class_c$pkg$kotlin_collections$g$List(this: Ref) {
  acc(T$class_c$pkg$kotlin_collections$g$Collection(this), wildcard)
}

predicate T$class_c$pkg$kotlin_collections$g$MutableCollection(this: Ref) {
  acc(T$class_c$pkg$kotlin_collections$g$Collection(this), wildcard) &&
  acc(T$class_c$pkg$kotlin_collections$g$MutableIterable(this), wildcard)
}

predicate T$class_c$pkg$kotlin_collections$g$MutableIterable(this: Ref) {
  acc(T$class_c$pkg$kotlin_collections$g$Iterable(this), wildcard)
}

predicate T$class_c$pkg$kotlin_collections$g$MutableList(this: Ref) {
  acc(T$class_c$pkg$kotlin_collections$g$List(this), wildcard) &&
  acc(T$class_c$pkg$kotlin_collections$g$MutableCollection(this), wildcard)
}

predicate U$T$class_c$pkg$kotlin_collections$g$Collection(this: Ref) {
  acc(U$T$class_c$pkg$kotlin_collections$g$Iterable(this), write)
}

predicate U$T$class_c$pkg$kotlin_collections$g$Iterable(this: Ref) {
  true
}

predicate U$T$class_c$pkg$kotlin_collections$g$List(this: Ref) {
  acc(U$T$class_c$pkg$kotlin_collections$g$Collection(this), write)
}

predicate U$T$class_c$pkg$kotlin_collections$g$MutableCollection(this: Ref) {
  acc(U$T$class_c$pkg$kotlin_collections$g$Collection(this), write) &&
  acc(U$T$class_c$pkg$kotlin_collections$g$MutableIterable(this), write)
}

predicate U$T$class_c$pkg$kotlin_collections$g$MutableIterable(this: Ref) {
  acc(U$T$class_c$pkg$kotlin_collections$g$Iterable(this), write)
}

predicate U$T$class_c$pkg$kotlin_collections$g$MutableList(this: Ref) {
  acc(U$T$class_c$pkg$kotlin_collections$g$List(this), write) &&
  acc(U$T$class_c$pkg$kotlin_collections$g$MutableCollection(this), write)
}

method f$g$listHierarchy$TF$T$class_c$pkg$kotlin_collections$g$MutableList(p$xs: Ref)
  returns (ret$0: Ref)
  requires acc(p$xs.sp$size, write)
  requires df$rt$intFromRef(p$xs.sp$size) >= 0
  ensures acc(p$xs.sp$size, write)
  ensures df$rt$intFromRef(p$xs.sp$size) >= 0
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$xs), df$rt$T$class_c$pkg$kotlin_collections$g$MutableList())
  inhale acc(T$class_c$pkg$kotlin_collections$g$MutableList(p$xs), wildcard)
  ret$0 := df$rt$unitValue()
  label lbl$ret$0
}
