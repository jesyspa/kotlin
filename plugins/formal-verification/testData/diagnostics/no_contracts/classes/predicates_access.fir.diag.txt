/predicates_access.kt:(249,272): info: Generated Viper text for accessSuperTypeProperty:
field bf$public$a: Ref

field bf$public$b: Ref

field bf$public$x: Ref

field bf$public$y: Ref

predicate T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(T$class_c$g$A(this), wildcard)
}

predicate T$class_c$g$C(this: Ref) {
  acc(this.bf$public$x, wildcard) &&
  acc(T$class_c$g$A(this.bf$public$x), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$x), df$rt$T$class_c$g$A()) &&
  acc(T$class_c$g$D(this), wildcard) &&
  acc(T$class_c$g$B(this), wildcard)
}

predicate T$class_c$g$D(this: Ref) {
  true
}

predicate U$T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate U$T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(U$T$class_c$g$A(this), write)
}

predicate U$T$class_c$g$C(this: Ref) {
  acc(this.bf$public$x, wildcard) &&
  acc(T$class_c$g$A(this.bf$public$x), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$x), df$rt$T$class_c$g$A()) &&
  acc(this.bf$public$y, write) &&
  acc(T$class_c$g$A(this.bf$public$y), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$y), df$rt$T$class_c$g$A()) &&
  acc(U$T$class_c$g$D(this), write) &&
  acc(U$T$class_c$g$B(this), write)
}

predicate U$T$class_c$g$D(this: Ref) {
  true
}

method f$g$accessSuperTypeProperty$TF$T$class_c$g$C(p$c: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$temp: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$c), df$rt$T$class_c$g$C())
  inhale acc(T$class_c$g$C(p$c), wildcard)
  ret$0 := df$rt$unitValue()
  unfold acc(T$class_c$g$C(p$c), wildcard)
  unfold acc(T$class_c$g$B(p$c), wildcard)
  unfold acc(T$class_c$g$A(p$c), wildcard)
  l0$temp := p$c.bf$public$a
  label lbl$ret$0
}

method pg$public$d(this: Ref) returns (ret: Ref)


/predicates_access.kt:(306,318): info: Generated Viper text for accessNested:
field bf$public$a: Ref

field bf$public$b: Ref

field bf$public$x: Ref

field bf$public$y: Ref

predicate T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(T$class_c$g$A(this), wildcard)
}

predicate T$class_c$g$C(this: Ref) {
  acc(this.bf$public$x, wildcard) &&
  acc(T$class_c$g$A(this.bf$public$x), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$x), df$rt$T$class_c$g$A()) &&
  acc(T$class_c$g$D(this), wildcard) &&
  acc(T$class_c$g$B(this), wildcard)
}

predicate T$class_c$g$D(this: Ref) {
  true
}

predicate U$T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate U$T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(U$T$class_c$g$A(this), write)
}

predicate U$T$class_c$g$C(this: Ref) {
  acc(this.bf$public$x, wildcard) &&
  acc(T$class_c$g$A(this.bf$public$x), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$x), df$rt$T$class_c$g$A()) &&
  acc(this.bf$public$y, write) &&
  acc(T$class_c$g$A(this.bf$public$y), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$y), df$rt$T$class_c$g$A()) &&
  acc(U$T$class_c$g$D(this), write) &&
  acc(U$T$class_c$g$B(this), write)
}

predicate U$T$class_c$g$D(this: Ref) {
  true
}

method f$g$accessNested$TF$T$class_c$g$C(p$c: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$temp: Ref
  var anon$0: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$c), df$rt$T$class_c$g$C())
  inhale acc(T$class_c$g$C(p$c), wildcard)
  ret$0 := df$rt$unitValue()
  unfold acc(T$class_c$g$C(p$c), wildcard)
  anon$0 := p$c.bf$public$x
  unfold acc(T$class_c$g$A(anon$0), wildcard)
  l0$temp := anon$0.bf$public$a
  label lbl$ret$0
}

method pg$public$d(this: Ref) returns (ret: Ref)


/predicates_access.kt:(354,368): info: Generated Viper text for accessNullable:
field bf$public$a: Ref

predicate T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate U$T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

method f$g$accessNullable$TF$class_c$g$A(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$n: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$nullable(df$rt$T$class_c$g$A()))
  inhale p$x != df$rt$nullValue() ==> acc(T$class_c$g$A(p$x), wildcard)
  ret$0 := df$rt$unitValue()
  if (!(p$x == df$rt$nullValue())) {
    unfold acc(T$class_c$g$A(p$x), wildcard)
    l0$n := p$x.bf$public$a
  }
  label lbl$ret$0
}

/predicates_access.kt:(442,452): info: Generated Viper text for accessCast:
field bf$public$a: Ref

field bf$public$b: Ref

predicate T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(T$class_c$g$A(this), wildcard)
}

predicate U$T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate U$T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(U$T$class_c$g$A(this), write)
}

method f$g$accessCast$TF$T$class_c$g$A(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$n: Ref
  var anon$0: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$T$class_c$g$A())
  inhale acc(T$class_c$g$A(p$x), wildcard)
  ret$0 := df$rt$unitValue()
  anon$0 := p$x
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$T$class_c$g$B())
  inhale acc(T$class_c$g$B(anon$0), wildcard)
  unfold acc(T$class_c$g$B(anon$0), wildcard)
  l0$n := anon$0.bf$public$b
  label lbl$ret$0
}

/predicates_access.kt:(501,515): info: Generated Viper text for accessSafeCast:
field bf$public$a: Ref

field bf$public$b: Ref

predicate T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(T$class_c$g$A(this), wildcard)
}

predicate U$T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate U$T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(U$T$class_c$g$A(this), write)
}

method f$g$accessSafeCast$TF$T$class_c$g$A(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$n: Ref
  var l0$y: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$T$class_c$g$A())
  inhale acc(T$class_c$g$A(p$x), wildcard)
  ret$0 := df$rt$unitValue()
  l0$n := df$rt$intToRef(0)
  if (df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$T$class_c$g$B())) {
    l0$y := p$x
  } else {
    l0$y := df$rt$nullValue()}
  inhale df$rt$isSubtype(df$rt$typeOf(l0$y), df$rt$nullable(df$rt$T$class_c$g$B()))
  inhale l0$y != df$rt$nullValue() ==> acc(T$class_c$g$B(l0$y), wildcard)
  if (!(l0$y == df$rt$nullValue())) {
    unfold acc(T$class_c$g$B(l0$y), wildcard)
    l0$n := l0$y.bf$public$b
  }
  label lbl$ret$0
}

/predicates_access.kt:(612,627): info: Generated Viper text for accessSmartCast:
field bf$public$a: Ref

field bf$public$b: Ref

predicate T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(T$class_c$g$A(this), wildcard)
}

predicate U$T$class_c$g$A(this: Ref) {
  acc(this.bf$public$a, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$a), df$rt$intType())
}

predicate U$T$class_c$g$B(this: Ref) {
  acc(this.bf$public$b, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this.bf$public$b), df$rt$intType()) &&
  acc(U$T$class_c$g$A(this), write)
}

method f$g$accessSmartCast$TF$T$class_c$g$A(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$n: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$T$class_c$g$A())
  inhale acc(T$class_c$g$A(p$x), wildcard)
  ret$0 := df$rt$unitValue()
  l0$n := df$rt$intToRef(0)
  if (df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$T$class_c$g$B())) {
    var anon$0: Ref
    anon$0 := p$x
    inhale acc(T$class_c$g$B(anon$0), wildcard)
    unfold acc(T$class_c$g$B(anon$0), wildcard)
    l0$n := anon$0.bf$public$b
  }
  label lbl$ret$0
}
