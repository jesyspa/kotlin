/interface.kt:(84,98): info: Generated Viper text for testProperties:
method f$testProperties$TF$T$c$Foo(p$foo: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var l0$x: Ref
  var anon$1: Ref
  var anon$2: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$foo), df$rt$T$c$Foo())
  inhale acc(p$c$Foo$shared(p$foo), wildcard)
  ret$0 := df$rt$unitValue()
  anon$0 := ps$c$Foo$public$varProp(p$foo, df$rt$intToRef(0))
  anon$1 := pg$c$Foo$public$varProp(p$foo)
  anon$2 := pg$c$Foo$public$valProp(p$foo)
  l0$x := sp$plusInts(anon$1, anon$2)
  label lbl$ret$0
}

method pg$c$Foo$public$valProp(this: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())


method pg$c$Foo$public$varProp(this: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())


method ps$c$Foo$public$varProp(this: Ref, p$value: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())


/interface.kt:(348,358): info: Generated Viper text for createImpl:
field bf$number: Ref

method con$c$Impl$T$Int(p$number: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$T$c$Impl())
  ensures acc(p$c$Impl$shared(ret), wildcard)
  ensures acc(p$c$Impl$unique(ret), write)
  ensures (unfolding acc(p$c$Impl$shared(ret), wildcard) in
      df$rt$intFromRef(ret.bf$number) == df$rt$intFromRef(p$number))


method f$createImpl$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$impl: Ref
  var l0$implField: Ref
  ret$0 := df$rt$unitValue()
  l0$impl := con$c$Impl$T$Int(df$rt$intToRef(-1))
  unfold acc(p$c$Impl$shared(l0$impl), wildcard)
  l0$implField := l0$impl.bf$number
  label lbl$ret$0
}

method pg$c$First$public$number(this: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())


method pg$c$Second$public$number(this: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())

