/multiple_interfaces.kt:(162,166): info: Generated Viper text for test:
method class_A$getter_field(this: Ref) returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


method class_C$getter_field(this: Ref) returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


method class_D$constructor$fun_take$$return$T_class_global$class_D()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_D())
  ensures acc(T_class_global$class_D(ret), wildcard)


method global$fun_test$fun_take$$return$T_Int() returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
{
  var anonymous$0: Ref
  anonymous$0 := class_D$constructor$fun_take$$return$T_class_global$class_D()
  ret$0 := class_A$getter_field(anonymous$0)
  inhale dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$intType())
  goto label$ret$0
  label label$ret$0
}

/multiple_interfaces.kt:(405,415): info: Generated Viper text for testVarVal:
method class_E$getter_field(this: Ref) returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$anyType())


method class_F$getter_field(this: Ref) returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


method class_F$setter_field(this: Ref, local$value: Ref) returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$unitType())


method class_G$constructor$fun_take$$return$T_class_global$class_G()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_G())
  ensures acc(T_class_global$class_G(ret), wildcard)


method class_H$getter_field(this: Ref) returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$intType())


method class_H$setter_field(this: Ref, local$value: Ref) returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$unitType())


method class_I$constructor$fun_take$$return$T_class_global$class_I()
  returns (ret: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret), dom$RuntimeType$T_class_global$class_I())
  ensures acc(T_class_global$class_I(ret), wildcard)


method global$fun_testVarVal$fun_take$$return$T_Unit() returns (ret$0: Ref)
  ensures dom$RuntimeType$isSubtype(dom$RuntimeType$typeOf(ret$0), dom$RuntimeType$unitType())
{
  var local0$g: Ref
  var anonymous$0: Ref
  var anonymous$1: Ref
  var local0$i: Ref
  var anonymous$2: Ref
  var anonymous$3: Ref
  ret$0 := dom$RuntimeType$unitValue()
  local0$g := class_G$constructor$fun_take$$return$T_class_global$class_G()
  anonymous$0 := class_F$getter_field(local0$g)
  anonymous$1 := class_F$setter_field(local0$g, dom$RuntimeType$intToRef(1))
  local0$i := class_I$constructor$fun_take$$return$T_class_global$class_I()
  anonymous$2 := class_H$getter_field(local0$i)
  anonymous$3 := class_H$setter_field(local0$i, dom$RuntimeType$intToRef(1))
  label label$ret$0
}
