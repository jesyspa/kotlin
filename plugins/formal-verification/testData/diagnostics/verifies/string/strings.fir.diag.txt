/strings.kt:(237,245): info: Generated Viper text for testType:
field bf$length: Ref

field bf$size: Ref

field bf$str: Ref

predicate p$c$StringBox$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$str, wildcard) &&
  acc(p$pkg$kotlin$c$String$shared(this$dispatch.bf$str), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$str), df$rt$stringType())
}

predicate p$c$StringBox$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$str, wildcard) &&
  acc(p$pkg$kotlin$c$String$shared(this$dispatch.bf$str), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$str), df$rt$stringType())
}

predicate p$pkg$java_io$c$Serializable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$java_io$c$Serializable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$BooleanArray$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$size), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin$c$BooleanArray$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$size), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin$c$CharSequence$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$CharSequence$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Comparable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Comparable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$String$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$length, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$length), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Comparable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$kotlin$c$CharSequence$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard) &&
  df$rt$intFromRef(this$dispatch.bf$length) ==
  |df$rt$stringFromRef(this$dispatch)|
}

predicate p$pkg$kotlin$c$String$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$length, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$length), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Comparable$unique(this$dispatch), write) &&
  acc(p$pkg$kotlin$c$CharSequence$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

method con$c$StringBox$T$String(p$str: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$c$StringBox())
  ensures acc(p$c$StringBox$shared(ret), wildcard)
  ensures acc(p$c$StringBox$unique(ret), write)
  ensures (unfolding acc(p$c$StringBox$shared(ret), wildcard) in
      df$rt$stringFromRef(ret.bf$str) == df$rt$stringFromRef(p$str))


method f$testType$TF$T$String(p$s: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$s), df$rt$stringType())
  inhale acc(p$pkg$kotlin$c$String$shared(p$s), wildcard)
  anon$1 := con$c$StringBox$T$String(p$s)
  unfold acc(p$c$StringBox$shared(anon$1), wildcard)
  anon$0 := anon$1.bf$str
  assert df$rt$stringFromRef(anon$0) == df$rt$stringFromRef(p$s)
  anon$3 := con$c$StringBox$T$String(df$rt$stringToRef(Seq(115, 116, 114)))
  unfold acc(p$c$StringBox$shared(anon$3), wildcard)
  anon$2 := anon$3.bf$str
  assert df$rt$stringFromRef(anon$2) == Seq(115, 116, 114)
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

method pg$public$length(this$dispatch: Ref) returns (ret: Ref)


/strings.kt:(368,383): info: Generated Viper text for testLengthField:
field bf$length: Ref

field bf$size: Ref

field bf$str: Ref

predicate p$c$StringBox$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$str, wildcard) &&
  acc(p$pkg$kotlin$c$String$shared(this$dispatch.bf$str), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$str), df$rt$stringType())
}

predicate p$c$StringBox$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$str, wildcard) &&
  acc(p$pkg$kotlin$c$String$shared(this$dispatch.bf$str), wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$str), df$rt$stringType())
}

predicate p$pkg$java_io$c$Serializable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$java_io$c$Serializable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$BooleanArray$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$size), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin$c$BooleanArray$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$size), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin$c$CharSequence$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$CharSequence$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Comparable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Comparable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$String$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$length, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$length), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Comparable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$kotlin$c$CharSequence$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard) &&
  df$rt$intFromRef(this$dispatch.bf$length) ==
  |df$rt$stringFromRef(this$dispatch)|
}

predicate p$pkg$kotlin$c$String$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$length, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$length), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Comparable$unique(this$dispatch), write) &&
  acc(p$pkg$kotlin$c$CharSequence$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

method con$c$StringBox$T$String(p$str: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$c$StringBox())
  ensures acc(p$c$StringBox$shared(ret), wildcard)
  ensures acc(p$c$StringBox$unique(ret), write)
  ensures (unfolding acc(p$c$StringBox$shared(ret), wildcard) in
      df$rt$stringFromRef(ret.bf$str) == df$rt$stringFromRef(p$str))


method f$testLengthField$TF$T$String(p$s: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$len: Ref
  var anon$0: Ref
  var anon$1: Ref
  var anon$2: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$s), df$rt$stringType())
  inhale acc(p$pkg$kotlin$c$String$shared(p$s), wildcard)
  unfold acc(p$pkg$kotlin$c$String$shared(p$s), wildcard)
  l0$len := p$s.bf$length
  anon$2 := con$c$StringBox$T$String(df$rt$stringToRef(Seq(115, 116, 114)))
  unfold acc(p$c$StringBox$shared(anon$2), wildcard)
  anon$1 := anon$2.bf$str
  unfold acc(p$pkg$kotlin$c$String$shared(anon$1), wildcard)
  anon$0 := anon$1.bf$length
  assert df$rt$intFromRef(anon$0) == 3
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

method pg$public$length(this$dispatch: Ref) returns (ret: Ref)


/strings.kt:(486,493): info: Generated Viper text for testOps:
field bf$length: Ref

field bf$size: Ref

predicate p$pkg$java_io$c$Serializable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$java_io$c$Serializable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$BooleanArray$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$size), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard)
}

predicate p$pkg$kotlin$c$BooleanArray$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$size, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$size), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Cloneable$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

predicate p$pkg$kotlin$c$CharSequence$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$CharSequence$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Cloneable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Comparable$shared(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$Comparable$unique(this$dispatch: Ref) {
  true
}

predicate p$pkg$kotlin$c$String$shared(this$dispatch: Ref) {
  acc(this$dispatch.bf$length, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$length), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Comparable$shared(this$dispatch), wildcard) &&
  acc(p$pkg$kotlin$c$CharSequence$shared(this$dispatch), wildcard) &&
  acc(p$pkg$java_io$c$Serializable$shared(this$dispatch), wildcard) &&
  df$rt$intFromRef(this$dispatch.bf$length) ==
  |df$rt$stringFromRef(this$dispatch)|
}

predicate p$pkg$kotlin$c$String$unique(this$dispatch: Ref) {
  acc(this$dispatch.bf$length, wildcard) &&
  df$rt$isSubtype(df$rt$typeOf(this$dispatch.bf$length), df$rt$intType()) &&
  acc(p$pkg$kotlin$c$Comparable$unique(this$dispatch), write) &&
  acc(p$pkg$kotlin$c$CharSequence$unique(this$dispatch), write) &&
  acc(p$pkg$java_io$c$Serializable$unique(this$dispatch), write)
}

method f$testOps$TF$T$String(p$s: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$c: Ref
  var anon$0: Ref
  var anon$1: Ref
  var l0$str: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$s), df$rt$stringType())
  inhale acc(p$pkg$kotlin$c$String$shared(p$s), wildcard)
  unfold acc(p$pkg$kotlin$c$String$shared(p$s), wildcard)
  anon$0 := p$s.bf$length
  if (df$rt$intFromRef(anon$0) > 0) {
    l0$c := sp$stringGet(p$s, df$rt$intToRef(0))
  } else {
    l0$c := df$rt$charToRef(97)}
  if (df$rt$charFromRef(l0$c) == 97) {
    anon$1 := df$rt$boolToRef(true)
  } else {
    var anon$2: Ref
    unfold acc(p$pkg$kotlin$c$String$shared(p$s), wildcard)
    anon$2 := p$s.bf$length
    anon$1 := sp$gtInts(anon$2, df$rt$intToRef(0))
  }
  assert df$rt$boolFromRef(anon$1)
  l0$str := df$rt$stringToRef(Seq(97, 98, 97))
  assert df$rt$stringFromRef(l0$str)[0] == df$rt$stringFromRef(l0$str)[2]
  assert !(df$rt$stringFromRef(l0$str)[1] == df$rt$stringFromRef(l0$str)[0])
  assert df$rt$stringFromRef(l0$str)[1] == 98
  assert Seq(75, 111, 116, 108, 105, 110) ++ Seq(46) ++
    Seq(83, 116, 114, 105, 110, 103) ==
    Seq(75, 111, 116, 108, 105, 110, 46, 83, 116, 114, 105, 110, 103)
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

method pg$public$length(this$dispatch: Ref) returns (ret: Ref)
