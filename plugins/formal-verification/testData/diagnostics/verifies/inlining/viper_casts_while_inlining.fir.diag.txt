/viper_casts_while_inlining.kt:(250,255): info: Generated Viper text for idFun:
method f$idFun$TF$NT$Any(p$arg: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$nullable(df$rt$anyType()))
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$arg), df$rt$nullable(df$rt$anyType()))
  ret$0 := p$arg
  goto lbl$ret$0
  label lbl$ret$0
}

/viper_casts_while_inlining.kt:(609,626): info: Generated Viper text for checkMemberAccess:
field bf$member: Ref

method con$c$ClassWithMember$T$Int(p$member: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$c$ClassWithMember())
  ensures acc(p$c$ClassWithMember$shared(ret), wildcard)
  ensures acc(p$c$ClassWithMember$unique(ret), write)
  ensures df$rt$intFromRef((unfolding acc(p$c$ClassWithMember$shared(ret), wildcard) in
      ret.bf$member)) ==
    df$rt$intFromRef(p$member)


method f$checkMemberAccess$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == true
{
  var l0$obj: Ref
  var anon$4: Ref
  var anon$5: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$6: Ref
  var ret$2: Ref
  var anon$1: Ref
  var anon$7: Ref
  var anon$8: Ref
  var anon$9: Ref
  var ret$3: Ref
  var anon$2: Ref
  var anon$10: Ref
  var ret$4: Ref
  var anon$3: Ref
  var anon$11: Ref
  l0$obj := con$c$ClassWithMember$T$Int(df$rt$intToRef(42))
  inhale df$rt$isSubtype(df$rt$typeOf(l0$obj), df$rt$nullable(df$rt$anyType()))
  anon$0 := l0$obj
  anon$7 := f$idFun$TF$NT$Any(anon$0)
  anon$1 := anon$7
  inhale df$rt$isSubtype(df$rt$typeOf(anon$1), df$rt$c$ClassWithMember())
  inhale acc(p$c$ClassWithMember$shared(anon$1), wildcard)
  unfold acc(p$c$ClassWithMember$shared(anon$1), wildcard)
  ret$2 := anon$1.bf$member
  goto lbl$ret$2
  label lbl$ret$2
  anon$6 := ret$2
  ret$1 := anon$6
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$1
  label lbl$ret$1
  anon$5 := ret$1
  anon$4 := anon$5
  inhale df$rt$isSubtype(df$rt$typeOf(anon$4), df$rt$intType())
  inhale df$rt$isSubtype(df$rt$typeOf(l0$obj), df$rt$nullable(df$rt$anyType()))
  anon$2 := l0$obj
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$c$ClassWithMember())
  inhale acc(p$c$ClassWithMember$shared(anon$2), wildcard)
  anon$3 := anon$2
  unfold acc(p$c$ClassWithMember$shared(l0$obj), wildcard)
  anon$11 := l0$obj.bf$member
  ret$0 := df$rt$boolToRef(df$rt$intFromRef(anon$11) == 42)
  goto lbl$ret$0
  label lbl$ret$4
  anon$10 := ret$4
  ret$3 := anon$10
  inhale df$rt$isSubtype(df$rt$typeOf(ret$3), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$3
  label lbl$ret$3
  anon$9 := ret$3
  anon$8 := anon$9
  inhale df$rt$isSubtype(df$rt$typeOf(anon$8), df$rt$nothingType())
  label lbl$ret$0
}

method f$idFun$TF$NT$Any(p$arg: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$nullable(df$rt$anyType()))


/viper_casts_while_inlining.kt:(895,919): info: Generated Viper text for checkGenericMemberAccess:
field bf$wrapped: Ref

method con$c$Box$NT$Any(p$wrapped: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$c$Box())
  ensures acc(p$c$Box$shared(ret), wildcard)
  ensures acc(p$c$Box$unique(ret), write)
  ensures (unfolding acc(p$c$Box$shared(ret), wildcard) in ret.bf$wrapped) ==
    p$wrapped


method f$checkGenericMemberAccess$TF$T$Box(p$box: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$boolType())
  ensures df$rt$boolFromRef(ret$0) == true
{
  var ret$1: Ref
  var anon$0: Ref
  var ret$2: Ref
  var anon$1: Ref
  var anon$4: Ref
  var anon$5: Ref
  var anon$6: Ref
  var ret$3: Ref
  var anon$2: Ref
  var anon$7: Ref
  var anon$8: Ref
  var anon$9: Ref
  var ret$4: Ref
  var anon$3: Ref
  var anon$10: Ref
  var anon$11: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$box), df$rt$c$Box())
  inhale acc(p$c$Box$shared(p$box), wildcard)
  inhale df$rt$isSubtype(df$rt$typeOf(p$box), df$rt$nullable(df$rt$anyType()))
  anon$0 := p$box
  anon$4 := f$idFun$TF$NT$Any(anon$0)
  anon$1 := anon$4
  inhale df$rt$isSubtype(df$rt$typeOf(anon$1), df$rt$c$Box())
  inhale acc(p$c$Box$shared(anon$1), wildcard)
  unfold acc(p$c$Box$shared(anon$1), wildcard)
  ret$2 := anon$1.bf$wrapped
  goto lbl$ret$2
  label lbl$ret$2
  ret$1 := ret$2
  goto lbl$ret$1
  label lbl$ret$1
  unfold acc(p$c$Box$shared(p$box), wildcard)
  anon$8 := p$box.bf$wrapped
  anon$7 := con$c$Box$NT$Any(anon$8)
  anon$2 := anon$7
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$nullable(df$rt$anyType()))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$c$Box())
  inhale acc(p$c$Box$shared(anon$2), wildcard)
  anon$3 := anon$2
  unfold acc(p$c$Box$shared(anon$3), wildcard)
  anon$10 := anon$3.bf$wrapped
  unfold acc(p$c$Box$shared(p$box), wildcard)
  anon$11 := p$box.bf$wrapped
  ret$0 := df$rt$boolToRef(anon$10 == anon$11)
  goto lbl$ret$0
  label lbl$ret$4
  anon$9 := ret$4
  ret$3 := anon$9
  inhale df$rt$isSubtype(df$rt$typeOf(ret$3), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$3
  label lbl$ret$3
  anon$6 := ret$3
  anon$5 := anon$6
  inhale df$rt$isSubtype(df$rt$typeOf(anon$5), df$rt$nothingType())
  label lbl$ret$0
}

method f$idFun$TF$NT$Any(p$arg: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$nullable(df$rt$anyType()))


/viper_casts_while_inlining.kt:(1161,1182): info: Generated Viper text for checkArgumentIsCopied:
field bf$a: Ref

method f$checkArgumentIsCopied$TF$T$ClassWithVar(p$x: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$2: Ref
  var anon$3: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$4: Ref
  var anon$5: Ref
  var ret$2: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$c$ClassWithVar())
  inhale acc(p$c$ClassWithVar$shared(p$x), wildcard)
  inhale acc(p$x.bf$a, write)
  anon$4 := p$x.bf$a
  exhale acc(p$x.bf$a, write)
  inhale df$rt$isSubtype(df$rt$typeOf(anon$4), df$rt$intType())
  anon$0 := anon$4
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$nullable(df$rt$anyType()))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  anon$1 := anon$0
  inhale acc(p$x.bf$a, write)
  p$x.bf$a := df$rt$intToRef(42)
  exhale acc(p$x.bf$a, write)
  ret$2 := anon$1
  goto lbl$ret$2
  label lbl$ret$2
  anon$5 := ret$2
  ret$1 := anon$5
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$1
  label lbl$ret$1
  anon$3 := ret$1
  anon$2 := anon$3
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$intType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/viper_casts_while_inlining.kt:(1347,1364): info: Generated Viper text for accessManyMembers:
field bf$a: Ref

field bf$b: Ref

field bf$c: Ref

field bf$i: Ref

method f$accessManyMembers$TF$T$ManyMembers(p$m: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$4: Ref
  var anon$5: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$6: Ref
  var ret$2: Ref
  var anon$1: Ref
  var anon$7: Ref
  var anon$8: Ref
  var anon$9: Ref
  var anon$10: Ref
  var anon$11: Ref
  var anon$12: Ref
  var anon$13: Ref
  var anon$14: Ref
  var ret$3: Ref
  var anon$2: Ref
  var anon$15: Ref
  var ret$4: Ref
  var anon$3: Ref
  var anon$16: Ref
  var anon$17: Ref
  var anon$18: Ref
  var anon$19: Ref
  var anon$20: Ref
  var anon$21: Ref
  var anon$22: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$m), df$rt$c$ManyMembers())
  inhale acc(p$c$ManyMembers$shared(p$m), wildcard)
  inhale df$rt$isSubtype(df$rt$typeOf(p$m), df$rt$nullable(df$rt$anyType()))
  anon$0 := p$m
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$c$ManyMembers())
  inhale acc(p$c$ManyMembers$shared(anon$0), wildcard)
  anon$1 := anon$0
  unfold acc(p$c$ManyMembers$shared(anon$1), wildcard)
  anon$9 := anon$1.bf$i
  anon$8 := f$idFun$TF$NT$Any(anon$9)
  anon$7 := anon$8
  inhale df$rt$isSubtype(df$rt$typeOf(anon$7), df$rt$intType())
  inhale acc(anon$1.bf$b, write)
  anon$12 := anon$1.bf$b
  exhale acc(anon$1.bf$b, write)
  inhale df$rt$isSubtype(df$rt$typeOf(anon$12), df$rt$boolType())
  anon$11 := f$idFun$TF$NT$Any(anon$12)
  anon$10 := anon$11
  inhale df$rt$isSubtype(df$rt$typeOf(anon$10), df$rt$boolType())
  unfold acc(p$c$ManyMembers$shared(anon$1), wildcard)
  ret$2 := anon$1.bf$c
  goto lbl$ret$2
  label lbl$ret$2
  anon$6 := ret$2
  ret$1 := anon$6
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$1
  label lbl$ret$1
  anon$5 := ret$1
  anon$4 := anon$5
  inhale df$rt$isSubtype(df$rt$typeOf(anon$4), df$rt$c$ClassWithVar())
  inhale acc(p$c$ClassWithVar$shared(anon$4), wildcard)
  inhale df$rt$isSubtype(df$rt$typeOf(p$m), df$rt$nullable(df$rt$anyType()))
  anon$2 := p$m
  anon$16 := f$idFun$TF$NT$Any(anon$2)
  anon$3 := anon$16
  inhale df$rt$isSubtype(df$rt$typeOf(anon$3), df$rt$c$ManyMembers())
  inhale acc(p$c$ManyMembers$shared(anon$3), wildcard)
  unfold acc(p$c$ManyMembers$shared(anon$3), wildcard)
  anon$19 := anon$3.bf$i
  anon$18 := f$idFun$TF$NT$Any(anon$19)
  anon$17 := anon$18
  inhale df$rt$isSubtype(df$rt$typeOf(anon$17), df$rt$intType())
  inhale acc(anon$3.bf$b, write)
  anon$22 := anon$3.bf$b
  exhale acc(anon$3.bf$b, write)
  inhale df$rt$isSubtype(df$rt$typeOf(anon$22), df$rt$boolType())
  anon$21 := f$idFun$TF$NT$Any(anon$22)
  anon$20 := anon$21
  inhale df$rt$isSubtype(df$rt$typeOf(anon$20), df$rt$boolType())
  unfold acc(p$c$ManyMembers$shared(anon$3), wildcard)
  ret$4 := anon$3.bf$c
  goto lbl$ret$4
  label lbl$ret$4
  anon$15 := ret$4
  ret$3 := anon$15
  inhale df$rt$isSubtype(df$rt$typeOf(ret$3), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$3
  label lbl$ret$3
  anon$14 := ret$3
  anon$13 := anon$14
  inhale df$rt$isSubtype(df$rt$typeOf(anon$13), df$rt$c$ClassWithVar())
  inhale acc(p$c$ClassWithVar$shared(anon$13), wildcard)
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

method f$idFun$TF$NT$Any(p$arg: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$nullable(df$rt$anyType()))


/viper_casts_while_inlining.kt:(1540,1558): info: Generated Viper text for checkEvaluatedOnce:
field bf$a: Ref

field bf$b: Ref

field bf$c: Ref

field bf$i: Ref

field bf$size: Ref

method f$checkEvaluatedOnce$TF$T$Int$T$ManyMembers(p$i: Ref, p$mm: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$2: Ref
  var anon$3: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$4: Ref
  var anon$5: Ref
  var anon$6: Ref
  var ret$2: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$i), df$rt$intType())
  inhale df$rt$isSubtype(df$rt$typeOf(p$mm), df$rt$c$ManyMembers())
  inhale acc(p$c$ManyMembers$shared(p$mm), wildcard)
  inhale acc(p$mm.bf$b, write)
  anon$5 := p$mm.bf$b
  exhale acc(p$mm.bf$b, write)
  inhale df$rt$isSubtype(df$rt$typeOf(anon$5), df$rt$boolType())
  if (df$rt$boolFromRef(anon$5)) {
    anon$4 := df$rt$intToRef(1)
  } else {
    anon$4 := df$rt$intToRef(-1)}
  anon$0 := sp$plusInts(p$i, anon$4)
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$nullable(df$rt$anyType()))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  anon$1 := anon$0
  assert df$rt$intFromRef(anon$1) == df$rt$intFromRef(anon$1)
  label lbl$ret$2
  inhale df$rt$isSubtype(df$rt$typeOf(ret$2), df$rt$unitType())
  anon$6 := ret$2
  ret$1 := anon$6
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$1
  label lbl$ret$1
  anon$3 := ret$1
  anon$2 := anon$3
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$unitType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}
