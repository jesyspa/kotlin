/while.kt:(254,264): info: Generated Viper text for test_while:
field bf$field: Ref

field bf$size: Ref

method con$c$ClassWithField$T$Int(p$field: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$c$ClassWithField())
  ensures acc(p$c$ClassWithField$shared(ret), wildcard)
  ensures acc(p$c$ClassWithField$unique(ret), write)
  ensures (unfolding acc(p$c$ClassWithField$shared(ret), wildcard) in
      df$rt$intFromRef(ret.bf$field) == df$rt$intFromRef(p$field))


method f$pkg$kotlin$c$Int$unaryMinus$TF$T$Int(this$dispatch: Ref)
  returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())


method f$test_while$TF$T$ClassWithField(p$param: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$c: Ref
  var l0$initParamField: Ref
  var l0$iteration: Ref
  var anon$1: Ref
  var anon$2: Ref
  var anon$3: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$param), df$rt$c$ClassWithField())
  inhale acc(p$c$ClassWithField$shared(p$param), wildcard)
  l0$c := con$c$ClassWithField$T$Int(df$rt$intToRef(13))
  unfold acc(p$c$ClassWithField$shared(p$param), wildcard)
  l0$initParamField := p$param.bf$field
  if (df$rt$intFromRef(l0$initParamField) > 0) {
    l0$iteration := df$rt$intToRef(0)
  } else {
    var l3$intermediate: Ref
    var anon$0: Ref
    anon$0 := f$pkg$kotlin$c$Int$unaryMinus$TF$T$Int(l0$initParamField)
    l3$intermediate := sp$plusInts(anon$0, df$rt$intToRef(1))
    l0$iteration := sp$timesInts(l3$intermediate, l3$intermediate)
  }
  label lbl$continue$0
  anon$1 := sp$ltInts(l0$iteration, df$rt$intToRef(10))
  while (df$rt$boolFromRef(anon$1))
    invariant acc(p$c$ClassWithField$shared(l0$c), wildcard)
    invariant df$rt$isSubtype(df$rt$typeOf(l0$c), df$rt$c$ClassWithField())
    invariant df$rt$isSubtype(df$rt$typeOf(l0$initParamField), df$rt$intType())
    invariant df$rt$isSubtype(df$rt$typeOf(l0$iteration), df$rt$intType())
    invariant acc(p$c$ClassWithField$shared(p$param), wildcard)
    invariant df$rt$isSubtype(df$rt$typeOf(p$param), df$rt$c$ClassWithField())
  {
    var l4$field: Ref
    var l4$paramField: Ref
    unfold acc(p$c$ClassWithField$shared(l0$c), wildcard)
    l4$field := l0$c.bf$field
    unfold acc(p$c$ClassWithField$shared(p$param), wildcard)
    l4$paramField := p$param.bf$field
    l0$iteration := sp$plusInts(l0$iteration, df$rt$intToRef(1))
    anon$1 := sp$ltInts(l0$iteration, df$rt$intToRef(10))
  }
  label lbl$break$0
  unfold acc(p$c$ClassWithField$shared(l0$c), wildcard)
  anon$2 := l0$c.bf$field
  assert df$rt$intFromRef(anon$2) == 13
  unfold acc(p$c$ClassWithField$shared(p$param), wildcard)
  anon$3 := p$param.bf$field
  assert df$rt$intFromRef(l0$initParamField) == df$rt$intFromRef(anon$3)
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/while.kt:(855,879): info: Generated Viper text for test_while_with_inlining:
field bf$field: Ref

field bf$size: Ref

method con$c$ClassWithField$T$Int(p$field: Ref) returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$c$ClassWithField())
  ensures acc(p$c$ClassWithField$shared(ret), wildcard)
  ensures acc(p$c$ClassWithField$unique(ret), write)
  ensures (unfolding acc(p$c$ClassWithField$shared(ret), wildcard) in
      df$rt$intFromRef(ret.bf$field) == df$rt$intFromRef(p$field))


method f$test_while_with_inlining$TF$T$ClassWithField(p$param: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var l0$local: Ref
  var anon$2: Ref
  var anon$3: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$4: Ref
  var anon$5: Ref
  var ret$2: Ref
  var anon$1: Ref
  var l2$iteration: Ref
  var anon$6: Ref
  var anon$7: Ref
  var anon$8: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$param), df$rt$c$ClassWithField())
  inhale acc(p$c$ClassWithField$shared(p$param), wildcard)
  l0$local := con$c$ClassWithField$T$Int(df$rt$intToRef(13))
  anon$4 := con$c$ClassWithField$T$Int(df$rt$intToRef(42))
  anon$0 := anon$4
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$nullable(df$rt$anyType()))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$c$ClassWithField())
  inhale acc(p$c$ClassWithField$shared(anon$0), wildcard)
  anon$1 := anon$0
  l2$iteration := df$rt$intToRef(0)
  label lbl$continue$0
  anon$6 := sp$ltInts(l2$iteration, df$rt$intToRef(10))
  while (df$rt$boolFromRef(anon$6))
    invariant df$rt$isSubtype(df$rt$typeOf(l2$iteration), df$rt$intType())
    invariant acc(p$c$ClassWithField$shared(l0$local), wildcard)
    invariant df$rt$isSubtype(df$rt$typeOf(l0$local), df$rt$c$ClassWithField())
    invariant acc(p$c$ClassWithField$shared(anon$1), wildcard)
    invariant df$rt$isSubtype(df$rt$typeOf(anon$1), df$rt$c$ClassWithField())
    invariant acc(p$c$ClassWithField$shared(p$param), wildcard)
    invariant df$rt$isSubtype(df$rt$typeOf(p$param), df$rt$c$ClassWithField())
  {
    var l3$paramField: Ref
    var l3$localField: Ref
    var l3$thisField: Ref
    unfold acc(p$c$ClassWithField$shared(p$param), wildcard)
    l3$paramField := p$param.bf$field
    unfold acc(p$c$ClassWithField$shared(l0$local), wildcard)
    l3$localField := l0$local.bf$field
    unfold acc(p$c$ClassWithField$shared(anon$1), wildcard)
    l3$thisField := anon$1.bf$field
    l2$iteration := sp$plusInts(l2$iteration, df$rt$intToRef(1))
    anon$6 := sp$ltInts(l2$iteration, df$rt$intToRef(10))
  }
  label lbl$break$0
  unfold acc(p$c$ClassWithField$shared(anon$1), wildcard)
  anon$7 := anon$1.bf$field
  assert df$rt$intFromRef(anon$7) == 42
  unfold acc(p$c$ClassWithField$shared(l0$local), wildcard)
  anon$8 := l0$local.bf$field
  assert df$rt$intFromRef(anon$8) == 13
  label lbl$ret$2
  inhale df$rt$isSubtype(df$rt$typeOf(ret$2), df$rt$unitType())
  anon$5 := ret$2
  ret$1 := anon$5
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$1
  label lbl$ret$1
  anon$3 := ret$1
  anon$2 := anon$3
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$unitType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/while.kt:(1267,1292): info: Generated Viper text for test_while_with_smartcast:
field bf$field: Ref

method f$test_while_with_smartcast$TF$T$Any$T$Any(p$param: Ref, p$innerParam: Ref)
  returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$param), df$rt$anyType())
  inhale df$rt$isSubtype(df$rt$typeOf(p$innerParam), df$rt$anyType())
  if (df$rt$isSubtype(df$rt$typeOf(p$param), df$rt$c$ClassWithField())) {
    var l2$iteration: Ref
    var anon$0: Ref
    l2$iteration := df$rt$intToRef(0)
    label lbl$continue$0
    anon$0 := sp$ltInts(l2$iteration, df$rt$intToRef(10))
    while (df$rt$boolFromRef(anon$0))
      invariant df$rt$isSubtype(df$rt$typeOf(l2$iteration), df$rt$intType())
      invariant df$rt$isSubtype(df$rt$typeOf(p$param), df$rt$anyType())
      invariant df$rt$isSubtype(df$rt$typeOf(p$innerParam), df$rt$anyType())
    {
      var l3$paramField: Ref
      inhale acc(p$c$ClassWithField$shared(p$param), wildcard)
      unfold acc(p$c$ClassWithField$shared(p$param), wildcard)
      l3$paramField := p$param.bf$field
      if (df$rt$isSubtype(df$rt$typeOf(p$innerParam), df$rt$c$ClassWithField())) {
        var l5$innerParamField: Ref
        inhale acc(p$c$ClassWithField$shared(p$innerParam), wildcard)
        unfold acc(p$c$ClassWithField$shared(p$innerParam), wildcard)
        l5$innerParamField := p$innerParam.bf$field
      }
      l2$iteration := sp$plusInts(l2$iteration, df$rt$intToRef(1))
      anon$0 := sp$ltInts(l2$iteration, df$rt$intToRef(10))
    }
    label lbl$break$0
  }
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}
