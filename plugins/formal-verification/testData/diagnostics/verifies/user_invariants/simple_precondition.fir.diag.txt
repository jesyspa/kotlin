/simple_precondition.kt:(238,242): info: Generated Viper text for test:
field bf$size: Ref

method f$test$TF$T$Int(p$idx: Ref) returns (ret$0: Ref)
  requires 0 <= df$rt$intFromRef(p$idx)
  requires df$rt$intFromRef(p$idx) < 3
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$idx), df$rt$intType())
  assert 0 <= df$rt$intFromRef(p$idx)
  assert df$rt$intFromRef(p$idx) < 3
  assert !(df$rt$intFromRef(p$idx) == 100)
  assert Seq(97, 97, 97)[df$rt$intFromRef(p$idx)] == 97
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/simple_precondition.kt:(446,469): info: Generated Viper text for inlineWithSpecification:
method f$inlineWithSpecification$TF$T$Boolean(p$bool: Ref)
  returns (ret$0: Ref)
  requires true
  requires df$rt$boolFromRef(p$bool)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$bool), df$rt$boolType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/simple_precondition.kt:(560,569): info: Generated Viper text for good_call:
method f$good_call$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$2: Ref
  var ret$1: Ref
  var anon$0: Ref
  var ret$2: Ref
  var anon$1: Ref
  anon$2 := f$test$TF$T$Int(df$rt$intToRef(2))
  anon$0 := df$rt$boolToRef(true)
  label lbl$ret$1
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$unitType())
  anon$1 := df$rt$boolToRef(false)
  label lbl$ret$2
  inhale df$rt$isSubtype(df$rt$typeOf(ret$2), df$rt$unitType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

method f$test$TF$T$Int(p$idx: Ref) returns (ret: Ref)
  requires 0 <= df$rt$intFromRef(p$idx)
  requires df$rt$intFromRef(p$idx) < 3
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$unitType())
