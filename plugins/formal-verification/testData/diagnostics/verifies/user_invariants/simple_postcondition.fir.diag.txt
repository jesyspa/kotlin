/simple_postcondition.kt:(64,75): info: Generated Viper text for testGreater:
method f$testGreater$TF$T$Int(p$init: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$intType())
  ensures df$rt$intFromRef(ret$0) > df$rt$intFromRef(p$init)
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$init), df$rt$intType())
  ret$0 := sp$plusInts(p$init, df$rt$intToRef(5))
  goto lbl$ret$0
  label lbl$ret$0
}

/simple_postcondition.kt:(201,211): info: Generated Viper text for testString:
field bf$length: Ref

method f$testString$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$charType())
  ensures df$rt$charFromRef(ret$0) == 97
{
  ret$0 := sp$stringGet(df$rt$stringToRef(Seq(98, 97, 98)), df$rt$intToRef(1))
  goto lbl$ret$0
  label lbl$ret$0
}

method pg$public$length(this$dispatch: Ref) returns (ret: Ref)


/simple_postcondition.kt:(323,343): info: Generated Viper text for testWithPrecondition:
method f$testWithPrecondition$TF$T$Int(p$int: Ref) returns (ret$0: Ref)
  requires df$rt$intFromRef(p$int) > 10
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$intType())
  ensures df$rt$intFromRef(ret$0) > 0
{
  inhale df$rt$isSubtype(df$rt$typeOf(p$int), df$rt$intType())
  ret$0 := sp$minusInts(p$int, df$rt$intToRef(10))
  goto lbl$ret$0
  label lbl$ret$0
}

/simple_postcondition.kt:(492,507): info: Generated Viper text for returnGreater13:
method f$returnGreater13$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$intType())
  ensures df$rt$intFromRef(ret$0) > 13
{
  ret$0 := df$rt$intToRef(16)
  goto lbl$ret$0
  label lbl$ret$0
}

/simple_postcondition.kt:(600,608): info: Generated Viper text for scenario:
method f$returnGreater13$TF$() returns (ret: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())
  ensures df$rt$intFromRef(ret) > 13


method f$scenario$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$intType())
{
  var anon$0: Ref
  anon$0 := f$returnGreater13$TF$()
  ret$0 := f$testWithPrecondition$TF$T$Int(anon$0)
  goto lbl$ret$0
  label lbl$ret$0
}

method f$testWithPrecondition$TF$T$Int(p$int: Ref) returns (ret: Ref)
  requires df$rt$intFromRef(p$int) > 10
  ensures df$rt$isSubtype(df$rt$typeOf(ret), df$rt$intType())
  ensures df$rt$intFromRef(ret) > 0

