/stdlib_replacement_tests.kt:(104,113): info: Generated Viper text for useChecks:
method f$useChecks$TF$() returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var ret$1: Ref
  var anon$0: Ref
  var ret$2: Ref
  var anon$1: Ref
  anon$0 := df$rt$boolToRef(true)
  label lbl$ret$1
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$unitType())
  anon$1 := df$rt$boolToRef(true)
  label lbl$ret$2
  inhale df$rt$isSubtype(df$rt$typeOf(ret$2), df$rt$unitType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/stdlib_replacement_tests.kt:(298,305): info: Generated Viper text for useRuns:
field bf$size: Ref

method f$useRuns$TF$T$Int(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$2: Ref
  var anon$3: Ref
  var ret$1: Ref
  var anon$4: Ref
  var ret$2: Ref
  var anon$5: Ref
  var anon$6: Ref
  var ret$3: Ref
  var anon$0: Ref
  var anon$7: Ref
  var ret$4: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$intType())
  ret$2 := sp$plusInts(p$x, df$rt$intToRef(1))
  goto lbl$ret$2
  label lbl$ret$2
  anon$4 := ret$2
  ret$1 := anon$4
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$1
  label lbl$ret$1
  anon$3 := ret$1
  anon$2 := anon$3
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$intType())
  assert df$rt$intFromRef(anon$2) == 1 + df$rt$intFromRef(p$x)
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$nullable(df$rt$anyType()))
  anon$0 := p$x
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  anon$1 := anon$0
  ret$4 := sp$plusInts(anon$1, df$rt$intToRef(1))
  goto lbl$ret$4
  label lbl$ret$4
  anon$7 := ret$4
  ret$3 := anon$7
  inhale df$rt$isSubtype(df$rt$typeOf(ret$3), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$3
  label lbl$ret$3
  anon$6 := ret$3
  anon$5 := anon$6
  inhale df$rt$isSubtype(df$rt$typeOf(anon$5), df$rt$intType())
  assert df$rt$intFromRef(anon$5) == 1 + df$rt$intFromRef(p$x)
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/stdlib_replacement_tests.kt:(415,422): info: Generated Viper text for useAlso:
field bf$size: Ref

method f$useAlso$TF$T$Int(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$2: Ref
  var anon$3: Ref
  var ret$1: Ref
  var anon$0: Ref
  var ret$2: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$intType())
  anon$0 := sp$plusInts(p$x, df$rt$intToRef(1))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$nullable(df$rt$anyType()))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  anon$1 := anon$0
  assert df$rt$intFromRef(anon$1) == 1 + df$rt$intFromRef(p$x)
  label lbl$ret$2
  inhale df$rt$isSubtype(df$rt$typeOf(ret$2), df$rt$unitType())
  ret$1 := anon$0
  goto lbl$ret$1
  label lbl$ret$1
  anon$3 := ret$1
  anon$2 := anon$3
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$intType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/stdlib_replacement_tests.kt:(487,493): info: Generated Viper text for useLet:
field bf$size: Ref

method f$useLet$TF$T$Int(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$2: Ref
  var anon$3: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$4: Ref
  var ret$2: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$intType())
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$nullable(df$rt$anyType()))
  anon$0 := p$x
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  anon$1 := anon$0
  ret$2 := sp$plusInts(anon$1, df$rt$intToRef(1))
  goto lbl$ret$2
  label lbl$ret$2
  anon$4 := ret$2
  ret$1 := anon$4
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$1
  label lbl$ret$1
  anon$3 := ret$1
  anon$2 := anon$3
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$intType())
  assert df$rt$intFromRef(anon$2) == 1 + df$rt$intFromRef(p$x)
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/stdlib_replacement_tests.kt:(555,562): info: Generated Viper text for useWith:
field bf$size: Ref

method f$useWith$TF$T$Int(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$2: Ref
  var anon$3: Ref
  var ret$1: Ref
  var anon$0: Ref
  var anon$4: Ref
  var ret$2: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$intType())
  anon$0 := sp$plusInts(p$x, df$rt$intToRef(1))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$nullable(df$rt$anyType()))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  anon$1 := anon$0
  assert df$rt$intFromRef(anon$1) == 1 + df$rt$intFromRef(p$x)
  label lbl$ret$2
  inhale df$rt$isSubtype(df$rt$typeOf(ret$2), df$rt$unitType())
  anon$4 := ret$2
  ret$1 := anon$4
  inhale df$rt$isSubtype(df$rt$typeOf(ret$1), df$rt$nullable(df$rt$anyType()))
  goto lbl$ret$1
  label lbl$ret$1
  anon$3 := ret$1
  anon$2 := anon$3
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$unitType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}

/stdlib_replacement_tests.kt:(628,636): info: Generated Viper text for useApply:
field bf$size: Ref

method f$useApply$TF$T$Int(p$x: Ref) returns (ret$0: Ref)
  ensures df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
{
  var anon$2: Ref
  var anon$3: Ref
  var ret$1: Ref
  var anon$0: Ref
  var ret$2: Ref
  var anon$1: Ref
  inhale df$rt$isSubtype(df$rt$typeOf(p$x), df$rt$intType())
  anon$0 := sp$plusInts(p$x, df$rt$intToRef(1))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$nullable(df$rt$anyType()))
  inhale df$rt$isSubtype(df$rt$typeOf(anon$0), df$rt$intType())
  anon$1 := anon$0
  assert df$rt$intFromRef(anon$1) == 1 + df$rt$intFromRef(p$x)
  label lbl$ret$2
  inhale df$rt$isSubtype(df$rt$typeOf(ret$2), df$rt$unitType())
  ret$1 := anon$0
  goto lbl$ret$1
  label lbl$ret$1
  anon$3 := ret$1
  anon$2 := anon$3
  inhale df$rt$isSubtype(df$rt$typeOf(anon$2), df$rt$intType())
  label lbl$ret$0
  inhale df$rt$isSubtype(df$rt$typeOf(ret$0), df$rt$unitType())
}
