FILE: contracts.kt
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun returns_true(): R|kotlin/Boolean|
        [R|Contract description]
         <
            Returns(WILDCARD)
            Returns(TRUE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|()
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|(Boolean(true))
            }
            )
        }

        ^returns_true Boolean(true)
    }
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun returns_false(): R|kotlin/Boolean|
        [R|Contract description]
         <
            Returns(WILDCARD)
            Returns(FALSE)
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|()
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|(Boolean(false))
            }
            )
        }

        ^returns_false Boolean(false)
    }
    @R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlin/contracts/ExperimentalContracts|))) public final fun conditional(a: R|kotlin/Boolean|, b: R|kotlin/Boolean|): R|kotlin/Boolean|
        [R|Contract description]
         <
            Returns(FALSE) -> b
            Returns(FALSE) -> a && b
        >
     {
         {
            R|kotlin/contracts/contract|(<L> = contract@fun R|kotlin/contracts/ContractBuilder|.<anonymous>(): R|kotlin/Unit| <inline=Inline, kind=UNKNOWN>  {
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|(Boolean(false)).R|kotlin/contracts/SimpleEffect.implies|(R|<local>/b|)
                this@R|special/anonymous|.R|kotlin/contracts/ContractBuilder.returns|(Boolean(false)).R|kotlin/contracts/SimpleEffect.implies|(R|<local>/a| && R|<local>/b|)
            }
            )
        }

        ^conditional Boolean(true)
    }
