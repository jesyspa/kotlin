/calls_in_place_leak.kt:(364,386): info: Generated Viper text for invalid_calls_in_place:
method global$fun_escape$fun_take$fun_take$$return$T_Unit$return$T_Unit(local$f: Ref)
  returns (ret: dom$Unit)
  requires acc(local$f.special$function_object_call_counter, write)
  requires special$duplicable(local$f)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter


method global$fun_invalid_calls_in_place$fun_take$fun_take$$return$T_Unit$return$T_Unit(local$f: Ref)
  returns (ret$0: dom$Unit)
  requires acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures true
{
  var anonymous$0: dom$Unit
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$f): dom$Type), dom$Type$Function())
  anonymous$0 := global$fun_escape$fun_take$fun_take$$return$T_Unit$return$T_Unit(local$f)
  label label$ret$0
}

/calls_in_place_leak.kt:(454,463): warning: Function may leak from its contract.

/calls_in_place_leak.kt:(544,564): info: Generated Viper text for function_object_call:
method global$fun_function_object_call$fun_take$fun_take$fun_take$$return$T_Unit$return$T_Unit$fun_take$$return$T_Unit$return$T_Unit(local$f: Ref,
  local$g: Ref)
  returns (ret$0: dom$Unit)
  requires acc(local$f.special$function_object_call_counter, write)
  requires acc(local$g.special$function_object_call_counter, write)
  requires special$duplicable(local$f)
  ensures acc(local$f.special$function_object_call_counter, write)
  ensures acc(local$g.special$function_object_call_counter, write)
  ensures old(local$f.special$function_object_call_counter) <=
    local$f.special$function_object_call_counter
  ensures old(local$g.special$function_object_call_counter) <=
    local$g.special$function_object_call_counter
  ensures true
{
  var anonymous$0: dom$Unit
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$f): dom$Type), dom$Type$Function())
  inhale dom$Type$isSubtype((dom$TypeOf$typeOf(local$g): dom$Type), dom$Type$Function())
  assert special$duplicable(local$g)
  special$invoke_function_object(local$f)
  ret$0 := anonymous$0
  goto label$ret$0
  label label$ret$0
}

/calls_in_place_leak.kt:(663,667): warning: Function may leak from its contract.
